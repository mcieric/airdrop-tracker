import React, { useState, useEffect } from "react"
import { useParams, Link, useLocation } from "react-router-dom"
import { getAirdropData, getDemoData } from "./lib/storage"
import { getShareToken, setShareToken, clearShareToken, generateToken, buildShareUrl } from "./lib/share"
import { setMetaTags } from "./lib/meta"
import "./index.css"

function useQuery(){ const {search}=useLocation(); return new URLSearchParams(search) }
const mask = (a)=>a?a.replace(/^(0x[0-9a-fA-F]{6}).+([0-9a-fA-F]{4})$/,"$1…$2"):""

export default function PublicDashboard(){
  const { wallet: raw } = useParams()
  const wallet = (raw || "0x88ac3d64230c8a453492ff908a02daa27e9b3429").toLowerCase()
  const q = useQuery(); const tokenFromUrl = q.get("token") || null

  const [data,setData] = useState(null)
  const [copied,setCopied] = useState(false)
  const [forbidden,setForbidden] = useState(false)
  const [shareUrl,setShareUrl] = useState("")

  useEffect(()=>{ setData(getAirdropData() || getDemoData()) },[])
  useEffect(()=>{
    // Bypass token en local (localhost / 192.168.*)
    try {
      const host = window.location.hostname || "";
      const isLocal = host == "localhost" || host.startswith("192.168.");
      if (isLocal) { setForbidden(false); return; }
    } catch (e) { /* ignore */ }

    const t = getShareToken(wallet);
    if (!t) { setForbidden(false); return; }
    setForbidden(tokenFromUrl !== t);
  },[wallet,tokenFromUrl])
  useEffect(()=>{
    if(data){ setMetaTags({wallet, tvlUSD:+data.tvlUSD||0, realizedUSD:+data.realizedUSD||0}) }
  },[data, wallet])

  const enableShare=()=>{ const t=generateToken(); setShareToken(wallet,t); setShareUrl(buildShareUrl(wallet,t)) }
  const copyLink=async()=>{ const t=getShareToken(wallet); const url=t?buildShareUrl(wallet,t):window.location.origin+`/public/${wallet}`; await navigator.clipboard.writeText(url); setCopied(true); setTimeout(()=>setCopied(false),1200) }
  const disableShare=()=>{ clearShareToken(wallet); setShareUrl("") }

  if(forbidden){
    return <div className="container">
      <div className="card">
        <h1>Access denied</h1>
        <p>Ce dashboard public est protégé par un <b>token</b>. Le lien doit contenir <code>?token=...</code>.</p>
        <p className="small">Astuce : ouvre la page sans <code>?token=</code>, clique “Activer lien public (token)” puis “Copier”.</p>
        <div className="space"></div>
        <Link to="/" className="btn btn-ghost">Back to app</Link>
      </div>
    </div>
  }

  if(!data) return <div className="container"><div className="card">Loading…</div></div>

  return <div className="container">
    <div className="row" style={{justifyContent:"space-between"}}>
      <div>
        <h1>Airdrop Tracker — Public</h1>
        <div className="sub">Lecture seule — données depuis localStorage</div>
      </div>
      <div className="row">
        <button className="btn btn-yellow" onClick={enableShare}>Activer lien public (token)</button>
        <button className="btn" onClick={copyLink}>{copied?"Lien copié ✓":"Copier le lien"}</button>
        <button className="btn" onClick={disableShare}>Désactiver le lien</button>
        <Link to="/" className="btn btn-ghost">Back to app</Link>
      </div>
    </div>

    {shareUrl && <div className="small" style={{marginTop:8,wordBreak:"break-all"}}>Lien généré : {shareUrl}</div>}

    <div className="space"></div>

    <div className="card">
      <div className="small" style={{textTransform:"uppercase",letterSpacing:".06em",marginBottom:6}}>Wallet</div>
      <div className="row" style={{justifyContent:"space-between"}}>
        <div style={{fontWeight:500}}>{mask(wallet)}</div>
        <a className="small" href={`https://debank.com/profile/${wallet}`} target="_blank" rel="noreferrer">View on DeBank</a>
      </div>
    </div>

    <div className="space"></div>

    <div className="kpis">
      <div className="card kpi">
        <div className="label">TVL (USD)</div>
        <div className="value">${(+data.tvlUSD).toLocaleString()}</div>
      </div>
      <div className="card kpi">
        <div className="label">Realized PnL (USD)</div>
        <div className="value">${(+data.realizedUSD).toLocaleString()}</div>
      </div>
      <div className="card kpi">
        <div className="label"># Airdrops</div>
        <div className="value">{(+data.airdropCount).toLocaleString()}</div>
      </div>
    </div>

    <div className="space"></div>

    <div className="table-wrap">
      <div className="table-head">Recent claims</div>
      <div style={{overflowX:"auto"}}>
        <table className="table">
          <thead>
            <tr><th>Token</th><th>Chain</th><th>Date</th><th>Value (USD)</th></tr>
          </thead>
          <tbody>
            {(data.claims || data.recentClaims || []).map((c,i)=>(
              <tr key={i}>
                <td style={{fontWeight:600}}>{c.token}</td>
                <td>{c.chain}</td>
                <td>{c.date}</td>
                <td>${(+c.usd).toLocaleString()}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

    <div className="space"></div>
    <div className="small">Cette vue publique masque les secrets : API keys, notes privées, tags internes, etc.</div>
  </div>
}
